apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgresql.fullname" . }}-scripts
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
data:
  wal-g.sh: |
    #!/usr/bin/env bash
    {{- if .Values.backup.enabled }}
    if [ -n "$PGUSERFILE" ]
    then
        export PGUSER=$(cat "$PGUSERFILE")
    fi
    if [ -n "$PGPASSWORDFILE" ]
    then
        export PGPASSWORD=$(cat "$PGPASSWORDFILE")
    fi
    {{- if .Values.backup.backend.s3.bucket }}
    export WALG_S3_PREFIX=s3://{{ .Values.backup.backend.s3.bucket }}{{ if .Values.backup.prefix }}/{{ .Values.backup.prefix }}{{ end }}/{{ default .Release.Name .Values.backup.name }}
    {{- end }}
    {{- range $key, $value := .Values.backup.env }}
    export {{ $key }}={{ $value | quote }}
    {{- end }}
    exec envdir /etc/wal-g.d/env wal-g "$@"
    {{- end }}

  fetch-wal.sh: |
    #!/usr/bin/env bash
    exec $(dirname $0)/wal-g.sh wal-fetch "$1" "$2"

  push-wal.sh: |
    #!/usr/bin/env bash
    exec $(dirname $0)/wal-g.sh wal-push "$1"

  push-backup.sh: |
    #!/usr/bin/env bash
    exec $(dirname $0)/wal-g.sh backup-push "$PATRONI_POSTGRESQL_DATA_DIR"

  restore-backup.py: |
    #!/usr/bin/env python
    import argparse
    import os
    parser = argparse.ArgumentParser()
    parser.add_argument('--scope')
    parser.add_argument('--datadir', required=True)
    args = parser.parse_args()
    wal_g = "/postgresql/scripts/wal-g.sh"
    os.execl(wal_g, wal_g, "backup-fetch", args.datadir, "LATEST")

  update-patroni-config.sh: |
    #!/usr/bin/env bash

    PATRONI_SUPERUSER_USERNAME=$(cat "$PATRONI_SUPERUSER_USERNAME_FILE")
    PATRONI_SUPERUSER_PASSWORD=$(cat "$PATRONI_SUPERUSER_PASSWORD_FILE")

    PATRONI_REPLICATION_USERNAME=$(cat "$PATRONI_REPLICATION_USERNAME_FILE")
    PATRONI_REPLICATION_PASSWORD=$(cat "$PATRONI_REPLICATION_PASSWORD_FILE")

    cat > /tmp/patroni.dcs.yaml <<EOS
    {{- .Values.dcs | toYaml | nindent 4 }}
    EOS

    cat > /tmp/patroni.yaml <<EOS
    bootstrap:
{{ if .Values.bootstrap }}
      {{- .Values.bootstrap | toYaml | nindent 6 }}
{{ end }}
      dcs:
        {{- .Values.dcs | toYaml | nindent 8 }}
      initdb:
        - auth-host: md5
        - auth-local: trust
        - encoding: UTF8
        - locale: en_US.UTF-8
        - data-checksums
      pg_hba:
        - host all all 0.0.0.0/0 md5
        - host replication ${PATRONI_REPLICATION_USERNAME} ${PATRONI_KUBERNETES_POD_IP}/16 md5
    restapi:
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:8008'
    postgresql:
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:5432'
      authentication:
        superuser:
          username: '${PATRONI_SUPERUSER_USERNAME}'
          password: '${PATRONI_SUPERUSER_PASSWORD}'
        replication:
          username: '${PATRONI_REPLICATION_USERNAME}'
          password: '${PATRONI_REPLICATION_PASSWORD}'
    watchdog:
      mode: off
    EOS

    chown postgres /tmp/patroni.dcs.yaml /tmp/patroni.yaml

  patroni.sh: |
    #!/usr/bin/env bash

    $(dirname $0)/update-patroni-config.sh

    export KUBERNETES_NAMESPACE=$PATRONI_KUBERNETES_NAMESPACE
    export POD_NAME=$PATRONI_NAME

    chown postgres -R /postgresql/data
    exec gosu postgres patroni /tmp/patroni.yaml
